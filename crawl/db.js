const axios = require("axios");
const moment = require("moment");

const quizItems = [
  {
    type: "toss",
    typeKr: "ÌÜ†Ïä§",
    title: "ÌñâÏö¥ÌÄ¥Ï¶à",
    image: "/images/toss.png",
  },
  {
    type: "cashwalk",
    typeKr: "Ï∫êÏãúÏõåÌÅ¨",
    title: "ÎèàÎ≤ÑÎäîÌÄ¥Ï¶à",
    image: "/images/cashwalk.png",
  },
  {
    type: "shinhan",
    typeKr: "Ïã†ÌïúÏè†ÌéòÏù¥",
    title: "Ïè†ÌÄ¥Ï¶à, ÌÄ¥Ï¶àÌå°Ìå°, Ï∂úÏÑùÌÄ¥Ï¶à",
    image: "/images/shinhan.png",
  },
  {
    type: "kakaobank",
    typeKr: "Ïπ¥Ïπ¥Ïò§Î±ÖÌÅ¨",
    title: "OX ÌÄ¥Ï¶à",
    image: "/images/kakaobank.png",
  },
  {
    type: "kakaopay",
    typeKr: "Ïπ¥Ïπ¥Ïò§ÌéòÏù¥",
    title: "Ïò§ÎäòÏùò ÌÄ¥Ï¶à",
    image: "/images/kakaopay.png",
  },
  {
    type: "bitbunny",
    typeKr: "ÎπÑÌä∏Î≤ÑÎãà",
    title: "Ïò§ÎäòÏùò ÌÄ¥Ï¶à",
    image: "/images/bitbunny.png",
  },
  {
    type: "okcashbag",
    typeKr: "Ïò§ÏºÄÏù¥Ï∫êÏãúÎ∞±",
    title: "Ïò§ÌÄ¥Ï¶à",
    image: "/images/okcashbag.png",
  },
  {
    type: "cashdoc",
    typeKr: "Ï∫êÏãúÎã•",
    title: "Ïö©ÎèàÌÄ¥Ï¶à",
    image: "/images/cashdoc.png",
  },
  {
    type: "kbstar",
    typeKr: "KBÏä§ÌÉÄ KBPAY",
    title: "ÎèÑÏ†ÑÎØ∏ÏÖò Ïä§ÌÉÄÌÄ¥Ï¶à, Ïò§ÎäòÏùò ÌÄ¥Ï¶à",
    image: "/images/kbstar.png",
  },
  {
    type: "3o3",
    typeKr: "ÏÇºÏ©úÏÇº",
    title: "Ïò§ÎäòÏùò ÌÄ¥Ï¶à",
    image: "/images/3o3.png",
  },
  {
    type: "doctornow",
    typeKr: "Îã•ÌÑ∞ÎÇòÏö∞",
    title: "Ïò§ÎäòÏùò ÌÄ¥Ï¶à",
    image: "/images/doctornow.png",
  },
  {
    type: "mydoctor",
    typeKr: "ÎÇòÎßåÏùò Îã•ÌÑ∞",
    title: "Í±¥Í∞ï ÌÄ¥Ï¶à",
    image: "/images/mydoctor.png",
  },
  {
    type: "hpoint",
    typeKr: "ÏóêÏù¥ÏπòÌè¨Ïù∏Ìä∏",
    title: "Ïò§ÎäòÏùò ÌÄ¥Ï¶à",
    image: "/images/hpoint.png",
  },
  {
    type: "climate",
    typeKr: "Í∏∞ÌõÑÌñâÎèô Í∏∞ÌöåÏÜåÎìù",
    title: "Ïò§ÎäòÏùò ÌÄ¥Ï¶à",
    image: "/images/climate.png",
  },
  {
    type: "skstoa",
    typeKr: "Ïä§ÌÜ†ÏïÑ",
    title: "ÌÄ¥Ï¶àÌÉÄÏûÑ",
    image: "/images/skstoa.png",
  },
  {
    type: "hanabank",
    typeKr: "ÌïòÎÇòÏùÄÌñâ",
    title: "Ïò§ÎäòÏùò ÌÄ¥Ï¶à",
    image: "/images/hanabank.png",
  },
  {
    type: "auction",
    typeKr: "Ïò•ÏÖò",
    title: "Îß§ÏùºÌÄ¥Ï¶à",
    image: "/images/auction.png",
  },
  {
    type: "nh",
    typeKr: "ÎÜçÌòë",
    title: "ÎîîÍπÖÌÄ¥Ï¶à",
    image: "/images/nh.png",
  },
];

const escapeSQLString = (str) => {
  if (!str) return ""; // null, undefined Î∞©ÏßÄ
  return str
    .replace(/\\/g, "\\\\") // Î∞±Ïä¨ÎûòÏãú ‚Üí Ïù¥Ï§ë Î∞±Ïä¨ÎûòÏãú
    .replace(/'/g, "\\'") // ÌôëÎî∞Ïò¥Ìëú ‚Üí \' Î°ú Ïù¥Ïä§ÏºÄÏù¥ÌîÑ
    .replace(/"/g, '\\"'); // ÏåçÎî∞Ïò¥Ìëú ‚Üí \" Î°ú Ïù¥Ïä§ÏºÄÏù¥ÌîÑ
};

const getQuizItems = (type) => {
  return quizItems.find((item) => item.type === type);
};

const getQuizbells = async (type, answerDate) => {
  const query = `SELECT * FROM quizbells WHERE type = '${type}' AND answerDate = '${answerDate}'`;
  const [rows] = await pool.query(query, [type, answerDate]);
  return rows[0];
};

const insertQuizbells = async (type, contents, answerDate) => {
  try {
    if (type && contents && answerDate) {
      const query = `INSERT INTO quizbells (type, contents, answerDate) VALUES ('${type}', '${contents}', '${answerDate}')`;
      await pool.query(query);
    }
  } catch (e) {
    console.log(e);
  }
};

const updateQuizbells = async (id, contents) => {
  try {
    if (id && contents) {
      const query = `UPDATE quizbells SET contents = '${contents}' WHERE id = '${id}'`;
      await pool.query(query);
    }
  } catch (e) {
    console.log(e);
  }
};

const alarmNotify = async (type) => {
  try {
    // Í∞ÄÍ≤© ÏïåÎûå Îì±Î°ùÌïú Ïú†Ï†Ä Í∞ÄÏ†∏Ïò§Í∏∞
    let query = `SELECT * FROM quizbells_users`;
    let d = await pool.query(query);
    const items = d[0];

    if (items.length === 0) {
      console.log("‚ùé ÏïÑÎ¨¥ÎèÑ Îì±Î°ùÏùÑ Ìï¥ÎÜìÏùÄ ÏÇ¨ÎûåÏù¥ ÏóÜÏäµÎãàÎã§.");
    }

    for (const item of items) {
      const params = {
        token: item.fcmToken,
        title: "ÌÄ¥Ï¶àÎ≤®",
        body: `${getQuizItems(type).typeKr} Ï†ïÎãµ ÏïåÎûåÏù¥ ÎèÑÏ∞©ÌñàÏñ¥Ïöî`,
        icon: `https://quizbells.com/icons/android-icon-192x192.png`,
        link: `https://quizbells.com/quiz/${type || "toss"}/today`,
      };

      // 1. ÏïåÎ¶º ÏûêÏ≤¥ ÎπÑÌôúÏÑ±Ìôî
      if (item.isQuizAlarm !== "Y") {
        console.log(`üîï ${item.fcmToken} Ïú†Ï†ÄÏóêÍ≤å Î∞úÏÜ° Ïïà Ìï® (ÏïåÎ¶º ÎπÑÌôúÏÑ±Ìôî)`);
        continue;
      }

      // 2. Ïñ¥Îñ§ ÌÄ¥Ï¶àÏóê ÎåÄÌïú ÏïåÎûåÏù∏ÏßÄ Î™ÖÌôïÌûà ÏÑ§Ï†ï
      const quizType = type; // Ïòà: "toss" / "cashwalk" Îì±

      // 3. ÏÑ§Ï†ï ÌååÏã±
      const allowedTypes =
        item.alarmSettings === "*"
          ? "ALL"
          : item.alarmSettings?.split(",").map((t) => t.trim()) || [];

      // 4. Ï°∞Í±¥ Ï≤¥ÌÅ¨ ÌõÑ Î∞úÏÜ°
      if (allowedTypes === "ALL" || allowedTypes.includes(quizType)) {
        console.log(
          `üîî [${getQuizItems(quizType).typeKr}] ${item.fcmToken} Ïú†Ï†ÄÏóêÍ≤å Î∞úÏÜ°`
        );
        await axios.post("https://quizbells.com/api/notify", params);
      } else {
        console.log(
          `‚õîÔ∏è [${getQuizItems(quizType).typeKr}] ${item.fcmToken} Ïú†Ï†ÄÎäî Ìï¥Îãπ ÌÄ¥Ï¶à ÏïåÎ¶º ÎπÑÌôúÏÑ±Ìôî`
        );
      }
    }
  } catch (e) {
    console.log("alarmNotify Ïò§Î•ò: ", e);
  }
};

const findNewQuizzes = (getItemContents, quizzes) => {
  const isSameQuiz = (quizA, quizB) => {
    return quizA.answer === quizB.answer;
  };
  const newQuizzes = quizzes.filter((newQuiz) => {
    const exists = getItemContents.some((existingQuiz) =>
      isSameQuiz(newQuiz, existingQuiz)
    );
    return !exists;
  });

  return newQuizzes;
};

const sanitizeQuotesInJsonArray = (data) => {
  return data.map((item) => {
    const newItem = {};

    for (const key in item) {
      if (!item.hasOwnProperty(key)) continue;

      const value = item[key];

      if (typeof value === "string") {
        newItem[key] = value.replace(/'/g, "").replace(/"/g, ""); // ' Ï†úÍ±∞
      } else if (Array.isArray(value)) {
        newItem[key] = value.map((v) =>
          typeof v === "string" ? v.replace(/'/g, "") : v
        );
      } else {
        newItem[key] = value;
      }
    }

    return newItem;
  });
};

const replaceAll = (str, search, replacement) => {
  return str.split(search).join(replacement);
};

const doInsert = async (quizzes, type, notifiedTypes) => {
  let shouldNotify = false;

  // Ïù¥ÏÉÅÌïú ÎãµÏùÄ Ï†úÏô∏ Ï≤òÎ¶¨ÌïòÍ∏∞
  quizzes = quizzes.filter((quiz) => !quiz.answer.includes("Ïû†ÏãúÎßå"));

  if (quizzes.length > 0) {
    const getItem = await getQuizbells(type, moment().format("YYYY-MM-DD"));

    if (getItem === undefined) {
      console.log(
        `‚úÖ [${moment().format("YYYY-MM-DD")}] ${type} ÌÄ¥Ï¶à ÌÅ¨Î°§ÎßÅ ÏôÑÎ£å`
      );
      const quizJson = escapeSQLString(JSON.stringify(quizzes));
      try {
        insertQuizbells(type, quizJson, moment().format("YYYY-MM-DD"));
        shouldNotify = true;
      } catch (e) {
        console.log(e);
      }
    } else {
      console.log(
        `‚úÖ [${moment().format("YYYY-MM-DD")}] ÌÄ¥Ï¶à Ïù¥ÎØ∏ Ï°¥Ïû¨ Ìï©ÎãàÎã§ - ${type}`
      );
    }

    if (getItem !== undefined) {
      const newQuizzes = findNewQuizzes(JSON.parse(getItem.contents), quizzes);
      // ÎëêÎ≤àÏß∏ Î¨∏Ï†ú
      if (newQuizzes.length > 0) {
        console.log("‚úÖ Ïù¥ÎØ∏ Îì±Î°ùÎêòÏóàÏßÄÎßå Î¨∏Ï†úÍ∞Ä Ï∂îÍ∞ÄÎêòÏñ¥ÏÑú ÏóÖÎç∞Ïù¥Ìä∏ Ìï©ÎãàÎã§.");
        const prevAnswers = sanitizeQuotesInJsonArray(
          JSON.parse(getItem.contents)
        );
        prevAnswers.push(newQuizzes[0]);

        console.log(
          `‚úÖ [${moment().format("YYYY-MM-DD")}] ${type} ÌÄ¥Ï¶à ÏóÖÎç∞Ïù¥Ìä∏ Ìï©ÎãàÎã§..`
        );

        if (prevAnswers.length > 0) {
          try {
            await updateQuizbells(getItem.id, JSON.stringify(prevAnswers));
            shouldNotify = true;
          } catch (e) {
            console.log(e);
          }
        }
      }
    }

    if (shouldNotify && notifiedTypes && !notifiedTypes.has(type)) {
      await alarmNotify(type);
      notifiedTypes.add(type); // ‚Üê ÏïåÎûå Î≥¥ÎÉàÎã§Í≥† Í∏∞Î°ù
    }
  }
};

module.exports = {
  insertQuizbells,
  updateQuizbells,
  getQuizbells,
  alarmNotify,
  escapeSQLString,
  findNewQuizzes,
  replaceAll,
  sanitizeQuotesInJsonArray,
  doInsert,
  quizItems,
};
